import { ExceptionOptionType as __ExceptionOptionType } from "@aws-sdk/smithy-client";
import { CognitoIdentityServiceException as __BaseException } from "./CognitoIdentityServiceException";
export declare enum AmbiguousRoleResolutionType {
    AUTHENTICATED_ROLE = "AuthenticatedRole",
    DENY = "Deny"
}

export interface CognitoIdentityProvider {
    
    ProviderName?: string;
    
    ClientId?: string;
    
    ServerSideTokenCheck?: boolean;
}
export declare namespace CognitoIdentityProvider {
    
    const filterSensitiveLog: (obj: CognitoIdentityProvider) => any;
}

export interface CreateIdentityPoolInput {
    
    IdentityPoolName: string | undefined;
    
    AllowUnauthenticatedIdentities: boolean | undefined;
    
    AllowClassicFlow?: boolean;
    
    SupportedLoginProviders?: {
        [key: string]: string;
    };
    
    DeveloperProviderName?: string;
    
    OpenIdConnectProviderARNs?: string[];
    
    CognitoIdentityProviders?: CognitoIdentityProvider[];
    
    SamlProviderARNs?: string[];
    
    IdentityPoolTags?: {
        [key: string]: string;
    };
}
export declare namespace CreateIdentityPoolInput {
    
    const filterSensitiveLog: (obj: CreateIdentityPoolInput) => any;
}

export interface IdentityPool {
    
    IdentityPoolId: string | undefined;
    
    IdentityPoolName: string | undefined;
    
    AllowUnauthenticatedIdentities: boolean | undefined;
    
    AllowClassicFlow?: boolean;
    
    SupportedLoginProviders?: {
        [key: string]: string;
    };
    
    DeveloperProviderName?: string;
    
    OpenIdConnectProviderARNs?: string[];
    
    CognitoIdentityProviders?: CognitoIdentityProvider[];
    
    SamlProviderARNs?: string[];
    
    IdentityPoolTags?: {
        [key: string]: string;
    };
}
export declare namespace IdentityPool {
    
    const filterSensitiveLog: (obj: IdentityPool) => any;
}

export declare class InternalErrorException extends __BaseException {
    readonly name: "InternalErrorException";
    readonly $fault: "server";
    
    constructor(opts: __ExceptionOptionType<InternalErrorException, __BaseException>);
}

export declare class InvalidParameterException extends __BaseException {
    readonly name: "InvalidParameterException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidParameterException, __BaseException>);
}

export declare class LimitExceededException extends __BaseException {
    readonly name: "LimitExceededException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<LimitExceededException, __BaseException>);
}

export declare class NotAuthorizedException extends __BaseException {
    readonly name: "NotAuthorizedException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<NotAuthorizedException, __BaseException>);
}

export declare class ResourceConflictException extends __BaseException {
    readonly name: "ResourceConflictException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceConflictException, __BaseException>);
}

export declare class TooManyRequestsException extends __BaseException {
    readonly name: "TooManyRequestsException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<TooManyRequestsException, __BaseException>);
}

export interface DeleteIdentitiesInput {
    
    IdentityIdsToDelete: string[] | undefined;
}
export declare namespace DeleteIdentitiesInput {
    
    const filterSensitiveLog: (obj: DeleteIdentitiesInput) => any;
}
export declare enum ErrorCode {
    ACCESS_DENIED = "AccessDenied",
    INTERNAL_SERVER_ERROR = "InternalServerError"
}

export interface UnprocessedIdentityId {
    
    IdentityId?: string;
    
    ErrorCode?: ErrorCode | string;
}
export declare namespace UnprocessedIdentityId {
    
    const filterSensitiveLog: (obj: UnprocessedIdentityId) => any;
}

export interface DeleteIdentitiesResponse {
    
    UnprocessedIdentityIds?: UnprocessedIdentityId[];
}
export declare namespace DeleteIdentitiesResponse {
    
    const filterSensitiveLog: (obj: DeleteIdentitiesResponse) => any;
}

export interface DeleteIdentityPoolInput {
    
    IdentityPoolId: string | undefined;
}
export declare namespace DeleteIdentityPoolInput {
    
    const filterSensitiveLog: (obj: DeleteIdentityPoolInput) => any;
}

export declare class ResourceNotFoundException extends __BaseException {
    readonly name: "ResourceNotFoundException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ResourceNotFoundException, __BaseException>);
}

export interface DescribeIdentityInput {
    
    IdentityId: string | undefined;
}
export declare namespace DescribeIdentityInput {
    
    const filterSensitiveLog: (obj: DescribeIdentityInput) => any;
}

export interface IdentityDescription {
    
    IdentityId?: string;
    
    Logins?: string[];
    
    CreationDate?: Date;
    
    LastModifiedDate?: Date;
}
export declare namespace IdentityDescription {
    
    const filterSensitiveLog: (obj: IdentityDescription) => any;
}

export interface DescribeIdentityPoolInput {
    
    IdentityPoolId: string | undefined;
}
export declare namespace DescribeIdentityPoolInput {
    
    const filterSensitiveLog: (obj: DescribeIdentityPoolInput) => any;
}

export declare class ExternalServiceException extends __BaseException {
    readonly name: "ExternalServiceException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ExternalServiceException, __BaseException>);
}

export interface GetCredentialsForIdentityInput {
    
    IdentityId: string | undefined;
    
    Logins?: {
        [key: string]: string;
    };
    
    CustomRoleArn?: string;
}
export declare namespace GetCredentialsForIdentityInput {
    
    const filterSensitiveLog: (obj: GetCredentialsForIdentityInput) => any;
}

export interface Credentials {
    
    AccessKeyId?: string;
    
    SecretKey?: string;
    
    SessionToken?: string;
    
    Expiration?: Date;
}
export declare namespace Credentials {
    
    const filterSensitiveLog: (obj: Credentials) => any;
}

export interface GetCredentialsForIdentityResponse {
    
    IdentityId?: string;
    
    Credentials?: Credentials;
}
export declare namespace GetCredentialsForIdentityResponse {
    
    const filterSensitiveLog: (obj: GetCredentialsForIdentityResponse) => any;
}

export declare class InvalidIdentityPoolConfigurationException extends __BaseException {
    readonly name: "InvalidIdentityPoolConfigurationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<InvalidIdentityPoolConfigurationException, __BaseException>);
}

export interface GetIdInput {
    
    AccountId?: string;
    
    IdentityPoolId: string | undefined;
    
    Logins?: {
        [key: string]: string;
    };
}
export declare namespace GetIdInput {
    
    const filterSensitiveLog: (obj: GetIdInput) => any;
}

export interface GetIdResponse {
    
    IdentityId?: string;
}
export declare namespace GetIdResponse {
    
    const filterSensitiveLog: (obj: GetIdResponse) => any;
}

export interface GetIdentityPoolRolesInput {
    
    IdentityPoolId: string | undefined;
}
export declare namespace GetIdentityPoolRolesInput {
    
    const filterSensitiveLog: (obj: GetIdentityPoolRolesInput) => any;
}
export declare enum MappingRuleMatchType {
    CONTAINS = "Contains",
    EQUALS = "Equals",
    NOT_EQUAL = "NotEqual",
    STARTS_WITH = "StartsWith"
}

export interface MappingRule {
    
    Claim: string | undefined;
    
    MatchType: MappingRuleMatchType | string | undefined;
    
    Value: string | undefined;
    
    RoleARN: string | undefined;
}
export declare namespace MappingRule {
    
    const filterSensitiveLog: (obj: MappingRule) => any;
}

export interface RulesConfigurationType {
    
    Rules: MappingRule[] | undefined;
}
export declare namespace RulesConfigurationType {
    
    const filterSensitiveLog: (obj: RulesConfigurationType) => any;
}
export declare enum RoleMappingType {
    RULES = "Rules",
    TOKEN = "Token"
}

export interface RoleMapping {
    
    Type: RoleMappingType | string | undefined;
    
    AmbiguousRoleResolution?: AmbiguousRoleResolutionType | string;
    
    RulesConfiguration?: RulesConfigurationType;
}
export declare namespace RoleMapping {
    
    const filterSensitiveLog: (obj: RoleMapping) => any;
}

export interface GetIdentityPoolRolesResponse {
    
    IdentityPoolId?: string;
    
    Roles?: {
        [key: string]: string;
    };
    
    RoleMappings?: {
        [key: string]: RoleMapping;
    };
}
export declare namespace GetIdentityPoolRolesResponse {
    
    const filterSensitiveLog: (obj: GetIdentityPoolRolesResponse) => any;
}

export interface GetOpenIdTokenInput {
    
    IdentityId: string | undefined;
    
    Logins?: {
        [key: string]: string;
    };
}
export declare namespace GetOpenIdTokenInput {
    
    const filterSensitiveLog: (obj: GetOpenIdTokenInput) => any;
}

export interface GetOpenIdTokenResponse {
    
    IdentityId?: string;
    
    Token?: string;
}
export declare namespace GetOpenIdTokenResponse {
    
    const filterSensitiveLog: (obj: GetOpenIdTokenResponse) => any;
}

export declare class DeveloperUserAlreadyRegisteredException extends __BaseException {
    readonly name: "DeveloperUserAlreadyRegisteredException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<DeveloperUserAlreadyRegisteredException, __BaseException>);
}

export interface GetOpenIdTokenForDeveloperIdentityInput {
    
    IdentityPoolId: string | undefined;
    
    IdentityId?: string;
    
    Logins: {
        [key: string]: string;
    } | undefined;
    
    PrincipalTags?: {
        [key: string]: string;
    };
    
    TokenDuration?: number;
}
export declare namespace GetOpenIdTokenForDeveloperIdentityInput {
    
    const filterSensitiveLog: (obj: GetOpenIdTokenForDeveloperIdentityInput) => any;
}

export interface GetOpenIdTokenForDeveloperIdentityResponse {
    
    IdentityId?: string;
    
    Token?: string;
}
export declare namespace GetOpenIdTokenForDeveloperIdentityResponse {
    
    const filterSensitiveLog: (obj: GetOpenIdTokenForDeveloperIdentityResponse) => any;
}
export interface GetPrincipalTagAttributeMapInput {
    
    IdentityPoolId: string | undefined;
    
    IdentityProviderName: string | undefined;
}
export declare namespace GetPrincipalTagAttributeMapInput {
    
    const filterSensitiveLog: (obj: GetPrincipalTagAttributeMapInput) => any;
}
export interface GetPrincipalTagAttributeMapResponse {
    
    IdentityPoolId?: string;
    
    IdentityProviderName?: string;
    
    UseDefaults?: boolean;
    
    PrincipalTags?: {
        [key: string]: string;
    };
}
export declare namespace GetPrincipalTagAttributeMapResponse {
    
    const filterSensitiveLog: (obj: GetPrincipalTagAttributeMapResponse) => any;
}

export interface ListIdentitiesInput {
    
    IdentityPoolId: string | undefined;
    
    MaxResults: number | undefined;
    
    NextToken?: string;
    
    HideDisabled?: boolean;
}
export declare namespace ListIdentitiesInput {
    
    const filterSensitiveLog: (obj: ListIdentitiesInput) => any;
}

export interface ListIdentitiesResponse {
    
    IdentityPoolId?: string;
    
    Identities?: IdentityDescription[];
    
    NextToken?: string;
}
export declare namespace ListIdentitiesResponse {
    
    const filterSensitiveLog: (obj: ListIdentitiesResponse) => any;
}

export interface ListIdentityPoolsInput {
    
    MaxResults: number | undefined;
    
    NextToken?: string;
}
export declare namespace ListIdentityPoolsInput {
    
    const filterSensitiveLog: (obj: ListIdentityPoolsInput) => any;
}

export interface IdentityPoolShortDescription {
    
    IdentityPoolId?: string;
    
    IdentityPoolName?: string;
}
export declare namespace IdentityPoolShortDescription {
    
    const filterSensitiveLog: (obj: IdentityPoolShortDescription) => any;
}

export interface ListIdentityPoolsResponse {
    
    IdentityPools?: IdentityPoolShortDescription[];
    
    NextToken?: string;
}
export declare namespace ListIdentityPoolsResponse {
    
    const filterSensitiveLog: (obj: ListIdentityPoolsResponse) => any;
}
export interface ListTagsForResourceInput {
    
    ResourceArn: string | undefined;
}
export declare namespace ListTagsForResourceInput {
    
    const filterSensitiveLog: (obj: ListTagsForResourceInput) => any;
}
export interface ListTagsForResourceResponse {
    
    Tags?: {
        [key: string]: string;
    };
}
export declare namespace ListTagsForResourceResponse {
    
    const filterSensitiveLog: (obj: ListTagsForResourceResponse) => any;
}

export interface LookupDeveloperIdentityInput {
    
    IdentityPoolId: string | undefined;
    
    IdentityId?: string;
    
    DeveloperUserIdentifier?: string;
    
    MaxResults?: number;
    
    NextToken?: string;
}
export declare namespace LookupDeveloperIdentityInput {
    
    const filterSensitiveLog: (obj: LookupDeveloperIdentityInput) => any;
}

export interface LookupDeveloperIdentityResponse {
    
    IdentityId?: string;
    
    DeveloperUserIdentifierList?: string[];
    
    NextToken?: string;
}
export declare namespace LookupDeveloperIdentityResponse {
    
    const filterSensitiveLog: (obj: LookupDeveloperIdentityResponse) => any;
}

export interface MergeDeveloperIdentitiesInput {
    
    SourceUserIdentifier: string | undefined;
    
    DestinationUserIdentifier: string | undefined;
    
    DeveloperProviderName: string | undefined;
    
    IdentityPoolId: string | undefined;
}
export declare namespace MergeDeveloperIdentitiesInput {
    
    const filterSensitiveLog: (obj: MergeDeveloperIdentitiesInput) => any;
}

export interface MergeDeveloperIdentitiesResponse {
    
    IdentityId?: string;
}
export declare namespace MergeDeveloperIdentitiesResponse {
    
    const filterSensitiveLog: (obj: MergeDeveloperIdentitiesResponse) => any;
}

export declare class ConcurrentModificationException extends __BaseException {
    readonly name: "ConcurrentModificationException";
    readonly $fault: "client";
    
    constructor(opts: __ExceptionOptionType<ConcurrentModificationException, __BaseException>);
}

export interface SetIdentityPoolRolesInput {
    
    IdentityPoolId: string | undefined;
    
    Roles: {
        [key: string]: string;
    } | undefined;
    
    RoleMappings?: {
        [key: string]: RoleMapping;
    };
}
export declare namespace SetIdentityPoolRolesInput {
    
    const filterSensitiveLog: (obj: SetIdentityPoolRolesInput) => any;
}
export interface SetPrincipalTagAttributeMapInput {
    
    IdentityPoolId: string | undefined;
    
    IdentityProviderName: string | undefined;
    
    UseDefaults?: boolean;
    
    PrincipalTags?: {
        [key: string]: string;
    };
}
export declare namespace SetPrincipalTagAttributeMapInput {
    
    const filterSensitiveLog: (obj: SetPrincipalTagAttributeMapInput) => any;
}
export interface SetPrincipalTagAttributeMapResponse {
    
    IdentityPoolId?: string;
    
    IdentityProviderName?: string;
    
    UseDefaults?: boolean;
    
    PrincipalTags?: {
        [key: string]: string;
    };
}
export declare namespace SetPrincipalTagAttributeMapResponse {
    
    const filterSensitiveLog: (obj: SetPrincipalTagAttributeMapResponse) => any;
}
export interface TagResourceInput {
    
    ResourceArn: string | undefined;
    
    Tags: {
        [key: string]: string;
    } | undefined;
}
export declare namespace TagResourceInput {
    
    const filterSensitiveLog: (obj: TagResourceInput) => any;
}
export interface TagResourceResponse {
}
export declare namespace TagResourceResponse {
    
    const filterSensitiveLog: (obj: TagResourceResponse) => any;
}

export interface UnlinkDeveloperIdentityInput {
    
    IdentityId: string | undefined;
    
    IdentityPoolId: string | undefined;
    
    DeveloperProviderName: string | undefined;
    
    DeveloperUserIdentifier: string | undefined;
}
export declare namespace UnlinkDeveloperIdentityInput {
    
    const filterSensitiveLog: (obj: UnlinkDeveloperIdentityInput) => any;
}

export interface UnlinkIdentityInput {
    
    IdentityId: string | undefined;
    
    Logins: {
        [key: string]: string;
    } | undefined;
    
    LoginsToRemove: string[] | undefined;
}
export declare namespace UnlinkIdentityInput {
    
    const filterSensitiveLog: (obj: UnlinkIdentityInput) => any;
}
export interface UntagResourceInput {
    
    ResourceArn: string | undefined;
    
    TagKeys: string[] | undefined;
}
export declare namespace UntagResourceInput {
    
    const filterSensitiveLog: (obj: UntagResourceInput) => any;
}
export interface UntagResourceResponse {
}
export declare namespace UntagResourceResponse {
    
    const filterSensitiveLog: (obj: UntagResourceResponse) => any;
}
